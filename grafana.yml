version: "3.9"
x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  prometheus:
    restart: "unless-stopped"
    build:
      context: ./prometheus
    image: prometheus:local
    volumes:
      - prom-data:/prometheus
      - /etc/localtime:/etc/localtime:ro
    environment:
      - CLIENT=${COMPOSE_FILE}
    entrypoint: choose-config.sh
    command: ["/bin/prometheus", "--storage.tsdb.path=/prometheus", "--web.console.libraries=/usr/share/prometheus/console_libraries", "--web.console.templates=/usr/share/prometheus/consoles"]
    <<: *logging
    depends_on:
      - node-exporter
      - cadvisor

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
#      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=${NODE_EXPORTER_IGNORE_MOUNT_REGEX}'
      - '--no-collector.ipvs'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
      - /etc/hostname:/etc/nodename:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/localtime:/etc/localtime:ro
    <<: *logging

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    command:
      - --docker_only
      - --housekeeping_interval=30s
    <<: *logging

  grafana:
    restart: "unless-stopped"
    build:
      context: ./grafana
    image: grafana:local
    environment:
      - GF_SERVER_HTTP_PORT=${GRAFANA_PORT}
      - CLIENT=${COMPOSE_FILE}
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-config:/etc/grafana
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - prometheus
    entrypoint: ["provision-dashboards.sh"]
    command: /run.sh
    <<: *logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.entrypoints=web,websecure
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_HOST}.${DOMAIN}`)
      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.http.services.grafana.loadbalancer.server.port=${GRAFANA_PORT}

volumes:
  grafana-data:
  grafana-config:
  prom-data:
